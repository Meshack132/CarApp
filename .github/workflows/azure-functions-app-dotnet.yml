name: Deploy DotNet project to Azure Function App

on:
  push:
    branches: ["main"]

env:
  AZURE_FUNCTIONAPP_NAME: 'your-app-name'                    # Replace with your Azure Function App name
  DOTNET_VERSION: '6.0.x'                                    # .NET version to use

jobs:
  build-and-deploy:
    runs-on: windows-latest                                  # Use ubuntu-latest if deploying on Linux

    steps:
    # Step 1: Checkout code from the repository
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    # Step 2: Show the current working directory
    - name: 'Show Working Directory'
      run: |
        echo "Current working directory:"
        pwd

    # Step 3: List all files and directories to locate CarApp.csproj
    - name: 'List Directory Contents'
      run: |
        echo "Listing all files in the repository to locate CarApp.csproj:"
        dir -Recurse

    # Step 4: Locate CarApp.csproj and set the PROJECT_PATH dynamically
    - name: 'Locate CarApp.csproj'
      shell: pwsh                                             # Use PowerShell syntax
      run: |
        if (Test-Path "./CarApp/CarApp.csproj") {
          Write-Output "Project file found at CarApp/CarApp.csproj"
          Add-Content -Path $env:GITHUB_ENV -Value "PROJECT_PATH=CarApp/CarApp.csproj"
        } elseif (Test-Path "./CarApp.csproj") {
          Write-Output "Project file found at CarApp.csproj"
          Add-Content -Path $env:GITHUB_ENV -Value "PROJECT_PATH=CarApp.csproj"
        } else {
          Write-Error "Error: Project file not found in expected locations."
          exit 1
        }

    # Step 5: Setup the .NET environment based on the specified version
    - name: Setup .NET Environment
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Step 6: Restore dependencies using the located project path
    - name: 'Restore Project Dependencies'
      run: dotnet restore ${{ env.PROJECT_PATH }}

    # Step 7: Publish the project to create deployment files in the ./output directory
    - name: 'Publish Project'
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ./output

    # Step 8: Deploy to Azure Function App
    - name: 'Deploy to Azure Functions'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: './output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
